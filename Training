from keras.optimizers import Adam

# Enable mixed precision (for TensorFlow 2.4 and later)


# Compile the model
model.compile(optimizer=Adam(learning_rate=1e-3, beta_2=0.9), loss='mean_squared_error', metrics=['mse'])
from tensorflow.keras.callbacks import ReduceLROnPlateau
# !apt-get install cuda

# # Rest of your imports and code...

# # Set the memory growth option for TensorFlow
# physical_devices = tf.config.list_physical_devices('GPU')
# if physical_devices:
#     try:
#         for device in physical_devices:
#             tf.config.experimental.set_memory_growth(device, True)
#     except:
#         # Invalid device or cannot modify virtual devices once initialized.
#         pass

# Rest of your code...
# Define the learning rate scheduler
lr_scheduler = ReduceLROnPlateau(
    monitor='val_loss',        # Metric to monitor
    factor=0.1,                # Factor by which the learning rate will be reduced
    patience=3,                # Number of epochs with no improvement before reducing the learning rate
    min_lr=1e-6,               # Lower bound for the learning rate
    verbose=1                  # Prints messages when learning rate is reduced
)

history = model.fit(
    x_train_noisy,   # Original noisy training data
    x_train,         # Original training labels
    batch_size=32,
    epochs=3,
    validation_data=(x_test_noisy, x_test),
    verbose=1,
    callbacks=[lr_scheduler]
)

response=model.predict(x_test_noisy)
import matplotlib.pyplot as plt
from skimage.metrics import peak_signal_noise_ratio as psnr

# Loop through the desired indices
for index in range(3, 6):
    # Display noisy image
    plt.subplot(1, 3, 1)  # Use a single row with 3 columns
    plt.imshow(x_test_noisy[index].astype(np.float32))
    plt.title("Noisy")
    plt.axis("off")

    # Display original image
    plt.subplot(1, 3, 2)
    plt.imshow(x_test[index].astype(np.float32))
    plt.title("Original")
    plt.axis("off")

    # Display denoised/reconstructed image
    plt.subplot(1, 3, 3)
    plt.imshow(response[index].astype(np.float32))
    plt.title("Reconstructed")
    plt.axis("off")

    # Show the plots
    plt.show()

    # Calculate PSNR between noisy and reconstructed image
    psnr_value = psnr(x_test_noisy[index], response[index], data_range=x_test_noisy[index].max() - x_test_noisy[index].min())
    print(f"PSNR between noisy and reconstructed for index {index}: {psnr_value:.2f} dB")
